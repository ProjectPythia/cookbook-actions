name: build-book

on:
  workflow_call:
    inputs:
      environment_name:
        description: 'Name of conda environment to activate'
        required: false
        default: 'book-build'
        type: string
      environment_file:
        description: 'Name of conda environment file'
        required: false
        default: 'book-build-environment.yml'
        type: string
      path_to_source:
        description: 'Location of the JupyterBook source relative to repo root'
        required: false
        default: './'
        type: string
      use_cached_environment:
        description: 'Flag for whether we should attempt to retrieve a previously cached environment.'
        required: false
        default: 'true'
        type: string  # had a lot of trouble with boolean types, see https://github.com/actions/runner/issues/1483
      binder_url:  # This should default to the binder URL in the jupyterbook config file
        description: 'URL for the BinderHub service to be used to execute notebooks'  
        required: false
        default: 'http://binder.mypythia.org'
        type: string
      binder_build_env_repo:  # this should just default to the current repo. 
        description: 'Repository where the execution environment for the Binder is defined'
        required: false
        default: ${{ github.repository }}
        type: string
      artifact_name:
        description: 'The name to assign to the built book artifact.'
        required: false
        default: 'book-zip'
        type: string

    secrets:
      ARM_USERNAME:
        description: 'Username for the ARM Data Discovery portal (https://adc.arm.gov/armlive/)'
        required: false
      ARM_PASSWORD:
        description: 'Password for the ARM Data Discovery portal (https://adc.arm.gov/armlive/)'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: ${{ inputs.environment_name }}
          use-mamba: true

      - name: Set cache date
        if: ${{ inputs.use_cached_environment == 'true' }}
        run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - uses: actions/cache@v3
        if: inputs.use_cached_environment == 'true'
        with:
          path: /usr/share/miniconda3/envs/${{ inputs.environment_name }}
          # This should create a key that looks like 'linux-64-conda-environment.yml-[HASH]-DATE'
          # Logic inspired by https://dev.to/epassaro/caching-anaconda-environments-on-github-actions-2d08
          key: ${{ format('linux-64-conda-{0}-{1}-{2}', inputs.environment_file, hashFiles(format('{0}', inputs.environment_file)), env.DATE )}}
        id: cache

      - name: Update environment
        if: |
          inputs.use_cached_environment != 'true'
          || steps.cache.outputs.cache-hit != 'true'
        run: mamba env update -n ${{ inputs.environment_name }} -f ${{ inputs.environment_file }}

      - name: Get Binder URL from config file
        shell: python
        run: |
          import yaml, os
          with open('_config.yml') as fh:
              dictionary_data = yaml.safe_load(fh)
          binder_url = dictionary_data['sphinx']['config']['html_theme_options']['launch_buttons']['binderhub_url']
          outfile = open("binder_url", "w")
          outfile.write(binder_url)
          outfile.close()

      - name: Get paths to notebook files
        # This will find ALL *.ipynb files in the repo
        #  It would be better to cross-check this against the _toc.yml file
        #  to avoid unneccesary execution of notebooks that aren't included in the book
        shell: python
        run: |
          import glob
          notebooks = glob.glob('**/*.ipynb', recursive=True)
          outfile = open("notebook_paths", "w")
          for path in notebooks:
              outfile.write(path + ' ')
          outfile.close()

      - name: Execute notebooks via binderbot 
        env:
          ARM_USERNAME: ${{ secrets.ARM_USERNAME }}
          ARM_PASSWORD: ${{ secrets.ARM_PASSWORD }}
        run: |
          URL=$(cat binder_url)
          NOTEBOOKS=$(cat notebook_paths)
          python -m binderbot.cli --binder-url $URL --repo ${{ inputs.binder_build_env_repo }} --ref main $NOTEBOOKS
        # this currently hard-codes the 'main' branch
        #  what should be our approach to the use case where the PR introduces changes to the environment.yml file
        #  and thus requires building a new image on the binder?
      - name: Build the book
        run: |
          jupyter-book build ${{ inputs.path_to_source }}

      - name: Zip the book
        run: |
          set -x
          set -e
          if [ -f book.zip ]; then
              rm -rf book.zip
          fi
          zip -r book.zip ${{ inputs.path_to_source }}/_build/html

      - name: Upload zipped book artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact_name }}
          path: ./book.zip
